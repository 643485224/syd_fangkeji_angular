(function(){var l,c,f,j,g,d,a,b,i,m,n,h,k,e;k=this;f=/^(\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;l="INIT";c="OPEN";e={};n=function(p,q){var o;o=p;if(!q){q=0}if(!o){o=new Error("a plugin had an error but provided no response");o.code=q}if(typeof o==="string"){o=new Error(p);o.code=q}if(!o.code&&o.message){o.code=q}if(!o.code&&!o.message){o=new Error("an unknown error was returned: "+JSON.stringify(o));o.code=q}return o};h=window.setImmediate||function(o){window.setTimeout(o,0)};b=function(o){return function(){var q,r,p;p=arguments.length;if(p){q=[];r=-1;while(++r<p){q[r]=arguments[r]}return o.call(this,q)}else{return o.call(this,[])}}};g=function(p,q,o){var r;if(!(p&&p["name"])){throw n("Cannot create a SQLitePlugin db instance without a db name")}r=p.name;if(typeof r!=="string"){throw n("sqlite plugin database name must be a string")}this.openargs=p;this.dbname=r;this.openSuccess=q;this.openError=o;this.openSuccess||(this.openSuccess=function(){console.log("DB opened: "+r)});this.openError||(this.openError=function(s){console.log(s.message)});this.open(this.openSuccess,this.openError)};g.prototype.databaseFeatures={isSQLitePluginDatabase:true};g.prototype.openDBs={};g.prototype.addTransaction=function(o){if(!e[this.dbname]){e[this.dbname]={queue:[],inProgress:false}}e[this.dbname].queue.push(o);if(this.dbname in this.openDBs&&this.openDBs[this.dbname]!==l){this.startNextTransaction()}else{if(this.dbname in this.openDBs){console.log("new transaction is queued, waiting for open operation to finish")}else{console.log("database is closed, new transaction is [stuck] waiting until db is opened again!")}}};g.prototype.transaction=function(p,o,q){if(!this.openDBs[this.dbname]){o(n("database not open"));return}this.addTransaction(new d(this,p,o,q,true,false))};g.prototype.readTransaction=function(p,o,q){if(!this.openDBs[this.dbname]){o(n("database not open"));return}this.addTransaction(new d(this,p,o,q,false,true))};g.prototype.startNextTransaction=function(){var o;o=this;h((function(p){return function(){var q;if(!(p.dbname in p.openDBs)||p.openDBs[p.dbname]!==c){console.log("cannot start next transaction: database not open");return}q=e[o.dbname];if(!q){console.log("cannot start next transaction: database connection is lost");return}else{if(q.queue.length>0&&!q.inProgress){q.inProgress=true;q.queue.shift().start()}}}})(this))};g.prototype.abortAllPendingTransactions=function(){var r,q,s,o,p;p=e[this.dbname];if(!!p&&p.queue.length>0){s=p.queue;for(r=0,q=s.length;r<q;r++){o=s[r];o.abortFromQ(n("Invalid database handle"))}p.queue=[];p.inProgress=false}};g.prototype.open=function(r,q){var p,s,o;if(this.dbname in this.openDBs){console.log("database already open: "+this.dbname);h((function(t){return function(){r(t)}})(this))}else{console.log("OPEN database: "+this.dbname);s=(function(t){return function(){var u;console.log("OPEN database: "+t.dbname+" - OK");if(!t.openDBs[t.dbname]){console.log("database was closed during open operation")}if(t.dbname in t.openDBs){t.openDBs[t.dbname]=c}if(!!r){r(t)}u=e[t.dbname];if(!!u&&u.queue.length>0&&!u.inProgress){t.startNextTransaction()}}})(this);p=(function(t){return function(){console.log("OPEN database: "+t.dbname+" FAILED, aborting any pending transactions");if(!!q){q(n("Could not open database"))}delete t.openDBs[t.dbname];t.abortAllPendingTransactions()}})(this);this.openDBs[this.dbname]=l;o=(function(t){return function(){cordova.exec(s,p,"SQLitePlugin","open",[t.openargs])}})(this);cordova.exec(o,o,"SQLitePlugin","close",[{path:this.dbname}])}};g.prototype.close=function(p,o){if(this.dbname in this.openDBs){if(e[this.dbname]&&e[this.dbname].inProgress){console.log("cannot close: transaction is in progress");o(n("database cannot be closed while a transaction is in progress"));return}console.log("CLOSE database: "+this.dbname);delete this.openDBs[this.dbname];if(e[this.dbname]){console.log("closing db with transaction queue length: "+e[this.dbname].queue.length)}else{console.log("closing db with no transaction lock state")}cordova.exec(p,o,"SQLitePlugin","close",[{path:this.dbname}])}else{console.log("cannot close: database is not open");if(o){h(function(){return o()})}}};g.prototype.executeSql=function(q,u,t,o){var p,r,s;s=function(v,w){if(!!t){return t(w)}};p=function(v,w){if(!!o){return o(w)}};r=function(v){v.addStatement(q,u,s,p)};this.addTransaction(new d(this,r,null,null,false,false))};g.prototype.sqlBatch=function(o,v,s){var t,r,q,u,p;if(!o||o.constructor!==Array){throw n("sqlBatch expects an array")}t=[];for(r=0,q=o.length;r<q;r++){p=o[r];if(p.constructor===Array){if(p.length===0){throw n("sqlBatch array element of zero (0) length")}t.push({sql:p[0],params:p.length===0?[]:p[1]})}else{t.push({sql:p,params:[]})}}u=function(w){var A,y,x,z;z=[];for(y=0,x=t.length;y<x;y++){A=t[y];z.push(w.addStatement(A.sql,A.params,null,null))}return z};this.addTransaction(new d(this,u,s,v,true,false))};d=function(o,r,p,s,q,t){if(typeof r!=="function"){throw n("transaction expected a function")}this.db=o;this.fn=r;this.error=p;this.success=s;this.txlock=q;this.readOnly=t;this.executes=[];if(q){this.addStatement("BEGIN",[],null,function(u,v){throw n("unable to begin transaction: "+v.message,v.code)})}else{this.addStatement("SELECT 1",[],null,null)}};d.prototype.start=function(){var o;try{this.fn(this);this.run()}catch(p){o=p;e[this.db.dbname].inProgress=false;this.db.startNextTransaction();if(this.error){this.error(n(o))}}};d.prototype.executeSql=function(r,o,q,p){if(this.finalized){throw {message:"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs on a subsequent tick and therefore after the transaction commits.",code:11};return}if(this.readOnly&&f.test(r)){this.handleStatementFailure(p,{message:"invalid sql for a read-only transaction"});return}this.addStatement(r,o,q,p)};d.prototype.addStatement=function(z,w,x,s){var q,r,o,p,y,u;p=typeof z==="string"?z:z.toString();o=[];if(!!w&&w.constructor===Array){for(q=0,r=w.length;q<r;q++){u=w[q];y=typeof u;o.push((u===null||u===void 0?null:y==="number"||y==="string"?u:u.toString()))}}this.executes.push({success:x,error:s,sql:p,params:o})};d.prototype.handleStatementSuccess=function(p,o){var r,q;if(!p){return}q=o.rows||[];r={rows:{item:function(s){return q[s]},length:q.length},rowsAffected:o.rowsAffected||0,insertId:o.insertId||void 0};p(this,r)};d.prototype.handleStatementFailure=function(p,o){if(!p){throw n("a statement with no error handler failed: "+o.message,o.code)}if(p(this,o)!==false){throw n("a statement error callback did not return false: "+o.message,o.code)}};d.prototype.run=function(){var o,r,t,q,p,s,w,u,v,x;v=null;w=[];o=this.executes;x=o.length;this.executes=[];u=this;r=function(y,z){return function(A){var B;if(!v){try{if(z){u.handleStatementSuccess(o[y].success,A)}else{u.handleStatementFailure(o[y].error,n(A))}}catch(C){B=C;v=n(B)}}if(--x===0){if(v){u.executes=[];u.abort(v)}else{if(u.executes.length>0){u.run()}else{u.finish()}}}}};p={};t=0;while(t<o.length){s=o[t];p[t]={success:r(t,true),error:r(t,false)};w.push({sql:s.sql,params:s.params});t++}q=function(z){var A,F,E,D,B,y,C;for(y=A=0,D=z.length-1;0<=D?A<=D:A>=D;y=0<=D?++A:--A){E=z[y];C=E.type;B=E.result;F=p[y];if(F){if(F[C]){F[C](B)}}}};cordova.exec(q,null,"SQLitePlugin","backgroundExecuteSqlBatch",[{dbargs:{dbname:this.db.dbname},executes:w}])};d.prototype.abort=function(r){var p,q,o;if(this.finalized){return}o=this;q=function(s){e[s.db.dbname].inProgress=false;s.db.startNextTransaction();if(s.error&&typeof s.error==="function"){s.error(r)}};p=function(s,t){e[s.db.dbname].inProgress=false;s.db.startNextTransaction();if(s.error&&typeof s.error==="function"){s.error(n("error while trying to roll back: "+t.message,t.code))}};this.finalized=true;if(this.txlock){this.addStatement("ROLLBACK",[],q,p);this.run()}else{q(o)}};d.prototype.finish=function(){var p,q,o;if(this.finalized){return}o=this;q=function(r){e[r.db.dbname].inProgress=false;r.db.startNextTransaction();if(r.success&&typeof r.success==="function"){r.success()}};p=function(r,s){e[r.db.dbname].inProgress=false;r.db.startNextTransaction();if(r.error&&typeof r.error==="function"){r.error(n("error while trying to commit: "+s.message,s.code))}};this.finalized=true;if(this.txlock){this.addStatement("COMMIT",[],q,p);this.run()}else{q(o)}};d.prototype.abortFromQ=function(o){if(this.error){this.error(o)}};i=["docs","libs","nosync"];m={"default":"nosync","Documents":"docs","Library":"libs"};j={openDatabase:b(function(q){var r,p,s,o;if(q.length<1||!q[0]){throw n("Sorry missing mandatory open arguments object in openDatabase call")}if(q[0].constructor===String){throw n("Sorry first openDatabase argument must be an object")}o=q[0];if(!o.name){throw n("Database name value is missing in openDatabase call")}if(!o.iosDatabaseLocation&&!o.location&&o.location!==0){throw n("Database location or iosDatabaseLocation setting is now mandatory in openDatabase call.")}if(!!o.location&&!!o.iosDatabaseLocation){throw n("AMBIGUOUS: both location and iosDatabaseLocation settings are present in openDatabase call. Please use either setting, not both.")}r=!!o.location&&o.location==="default"?m["default"]:!!o.iosDatabaseLocation?m[o.iosDatabaseLocation]:i[o.location];if(!r){throw n("Valid iOS database location could not be determined in openDatabase call")}o.dblocation=r;if(!!o.createFromLocation&&o.createFromLocation===1){o.createFromResource="1"}if(!!o.androidDatabaseProvider&&!!o.androidDatabaseImplementation){throw n("AMBIGUOUS: both androidDatabaseProvider and deprecated androidDatabaseImplementation settings are present in openDatabase call. Please drop androidDatabaseImplementation in favor of androidDatabaseProvider.")}if(o.androidDatabaseProvider!==void 0&&o.androidDatabaseProvider!=="default"&&o.androidDatabaseProvider!=="system"){throw n("Incorrect androidDatabaseProvider value. Valid values are: 'default', 'system'")}if(!!o.androidDatabaseProvider&&o.androidDatabaseProvider==="system"){o.androidOldDatabaseImplementation=1}if(!!o.androidDatabaseImplementation&&o.androidDatabaseImplementation===2){o.androidOldDatabaseImplementation=1}if(!!o.androidLockWorkaround&&o.androidLockWorkaround===1){o.androidBugWorkaround=1}s=null;p=null;if(q.length>=2){s=q[1];if(q.length>2){p=q[2]}}return new g(o,s,p)}),deleteDatabase:function(t,s,p){var o,q,r;o={};if(t.constructor===String){throw n("Sorry first deleteDatabase argument must be an object")}else{if(!(t&&t["name"])){throw new Error("Please specify db name")}r=t.name;if(typeof r!=="string"){throw n("delete database name must be a string")}o.path=r}if(!t.iosDatabaseLocation&&!t.location&&t.location!==0){throw n("Database location or iosDatabaseLocation setting is now mandatory in deleteDatabase call.")}if(!!t.location&&!!t.iosDatabaseLocation){throw n("AMBIGUOUS: both location and iosDatabaseLocation settings are present in deleteDatabase call. Please use either setting value, not both.")}q=!!t.location&&t.location==="default"?m["default"]:!!t.iosDatabaseLocation?m[t.iosDatabaseLocation]:i[t.location];if(!q){throw n("Valid iOS database location could not be determined in deleteDatabase call")}o.dblocation=q;delete g.prototype.openDBs[o.path];return cordova.exec(s,p,"SQLitePlugin","delete",[o])}};a={DBNAME:"___$$$___litehelpers___$$$___test___$$$___.db",start:function(p,o){j.deleteDatabase({name:a.DBNAME,location:"default"},(function(){return a.step1(p,o)}),(function(){return a.step1(p,o)}))},step1:function(p,o){j.openDatabase({name:a.DBNAME,location:"default"},function(q){var r;r=false;q.transaction(function(s){s.executeSql('SELECT UPPER("Test") AS upperText',[],function(t,u){if(!u.rows){return a.finishWithError(o,"Missing resutSet.rows")}if(!u.rows.length){return a.finishWithError(o,"Missing resutSet.rows.length")}if(u.rows.length!==1){return a.finishWithError(o,"Incorrect resutSet.rows.length value: "+u.rows.length+" (expected: 1)")}if(!u.rows.item(0).upperText){return a.finishWithError(o,"Missing resutSet.rows.item(0).upperText")}if(u.rows.item(0).upperText!=="TEST"){return a.finishWithError(o,"Incorrect resutSet.rows.item(0).upperText value: "+(u.rows.item(0).upperText)+" (expected: 'TEST')")}r=true},function(t,u){return a.finishWithError(o,"TX SQL error: "+u)})},function(s){return a.finishWithError(o,"TRANSACTION error: "+s)},function(){if(!r){return a.finishWithError(o,"Did not get expected upperText result data")}q.executeSql("BEGIN",null,function(s){return h(function(){delete q.openDBs[a.DBNAME];delete e[a.DBNAME];h(function(){q.transaction(function(t){t.executeSql("SELECT 1")},function(t){if(!t){return a.finishWithError(o,"Missing error object")}a.step2(p,o)},function(){return a.finishWithError(o,"Missing error object")})})})})})},function(q){return a.finishWithError(o,"Open database error: "+q)})},step2:function(p,o){j.openDatabase({name:a.DBNAME,location:"default"},function(q){q.transaction(function(r){r.executeSql("SELECT ? AS myResult",[null],function(s,t){if(!t.rows){return a.finishWithError(o,"Missing resutSet.rows")}if(!t.rows.length){return a.finishWithError(o,"Missing resutSet.rows.length")}if(t.rows.length!==1){return a.finishWithError(o,"Incorrect resutSet.rows.length value: "+t.rows.length+" (expected: 1)")}a.step3(p,o)})},function(r){return a.finishWithError(o,"UNEXPECTED TRANSACTION ERROR: "+r)})},function(q){return a.finishWithError(o,"Open database error: "+q)})},step3:function(p,o){j.openDatabase({name:a.DBNAME,location:"default"},function(q){return q.sqlBatch(["CREATE TABLE TestTable(id integer primary key autoincrement unique, data);",["INSERT INTO TestTable (data) VALUES (?);",["test-value"]]],function(){var r;r=-1;return q.executeSql("SELECT id, data FROM TestTable",[],function(s){if(!s.rows){a.finishWithError(o,"Missing resutSet.rows");return}if(!s.rows.length){a.finishWithError(o,"Missing resutSet.rows.length");return}if(s.rows.length!==1){a.finishWithError(o,"Incorrect resutSet.rows.length value: "+s.rows.length+" (expected: 1)");return}if(s.rows.item(0).id===void 0){a.finishWithError(o,"Missing resutSet.rows.item(0).id");return}r=s.rows.item(0).id;if(!s.rows.item(0).data){a.finishWithError(o,"Missing resutSet.rows.item(0).data");return}if(s.rows.item(0).data!=="test-value"){a.finishWithError(o,"Incorrect resutSet.rows.item(0).data value: "+(s.rows.item(0).data)+" (expected: 'test-value')");return}return q.transaction(function(t){return t.executeSql("UPDATE TestTable SET data = ?",["new-value"])},function(t){return a.finishWithError(o,"UPDATE transaction error: "+t)},function(){var t;t=false;return q.readTransaction(function(u){return u.executeSql("SELECT id, data FROM TestTable",[],function(w,v){if(!v.rows){throw n("Missing resutSet2.rows")}if(!v.rows.length){throw n("Missing resutSet2.rows.length")}if(v.rows.length!==1){throw n("Incorrect resutSet2.rows.length value: "+v.rows.length+" (expected: 1)")}if(!v.rows.item(0).id){throw n("Missing resutSet2.rows.item(0).id")}if(v.rows.item(0).id!==r){throw n("resutSet2.rows.item(0).id value "+(v.rows.item(0).id)+" does not match previous primary key id value ("+r+")")}if(!v.rows.item(0).data){throw n("Missing resutSet2.rows.item(0).data")}if(v.rows.item(0).data!=="new-value"){throw n("Incorrect resutSet2.rows.item(0).data value: "+(v.rows.item(0).data)+" (expected: 'test-value')")}return t=true})},function(u){return a.finishWithError(o,"readTransaction error: "+u)},function(){if(!t){a.finishWithError(o,"readTransaction did not finish");return}return q.transaction(function(u){u.executeSql("DELETE FROM TestTable");return u.executeSql("INSERT INTO TestTable (data) VALUES(?)",[123])},function(u){return a.finishWithError(o,"DELETE transaction error: "+u)},function(){var u;u=false;return q.readTransaction(function(v){return v.executeSql("SELECT id, data FROM TestTable",[],function(w,x){if(!x.rows){throw n("Missing resutSet3.rows")}if(!x.rows.length){throw n("Missing resutSet3.rows.length")}if(x.rows.length!==1){throw n("Incorrect resutSet3.rows.length value: "+x.rows.length+" (expected: 1)")}if(!x.rows.item(0).id){throw n("Missing resutSet3.rows.item(0).id")}if(x.rows.item(0).id===r){throw n("resutSet3.rows.item(0).id value "+(x.rows.item(0).id)+" incorrectly matches previous unique key id value value ("+r+")")}if(!x.rows.item(0).data){throw n("Missing resutSet3.rows.item(0).data")}if(x.rows.item(0).data!==123){throw n("Incorrect resutSet3.rows.item(0).data value: "+(x.rows.item(0).data)+" (expected 123)")}return u=true})},function(v){return a.finishWithError(o,"second readTransaction error: "+v)},function(){if(!u){a.finishWithError(o,"second readTransaction did not finish");return}q.close(function(){a.cleanupAndFinish(p,o)},function(v){a.finishWithError(o,"close error: "+v)})})})})})},function(s){return a.finishWithError(o,"SELECT error: "+s)})},function(r){return a.finishWithError(o,"sql batch error: "+r)})},function(q){return a.finishWithError(o,"Open database error: "+q)})},cleanupAndFinish:function(p,o){j.deleteDatabase({name:a.DBNAME,location:"default"},p,function(q){a.finishWithError(o,"CLEANUP DELETE ERROR: "+q)})},finishWithError:function(o,p){console.log("selfTest ERROR with message: "+p);j.deleteDatabase({name:a.DBNAME,location:"default"},function(){o(n(p))},function(q){console.log("selfTest CLEANUP DELETE ERROR "+q);o(n("CLEANUP DELETE ERROR: "+q+" for error: "+p))})}};k.sqlitePlugin={sqliteFeatures:{isSQLitePlugin:true},echoTest:function(r,p){var o,q;q=function(t){if(t==="test-string"){return r()}else{return p("Mismatch: got: '"+t+"' expected 'test-string'")}};o=function(s){return p(s)};return cordova.exec(q,o,"SQLitePlugin","echoStringValue",[{value:"test-string"}])},selfTest:a.start,openDatabase:j.openDatabase,deleteDatabase:j.deleteDatabase}}).call(this);